/* Copyright 2020 The Moroso Project */

/*
Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Original Author: Shay Gal-on
*/

/* File: core_main.c
        This file contains the framework to acquire a block of memory, seed
   initial parameters, tun t he benchmark and report the results.
*/


use core_util::{debug, crc16, crcu16, get_seed_args};
use core_list_join::{core_bench_list, core_list_init};
use core_matrix::{core_init_matrix};
use core_state::{core_init_state};
use core_types::{core_results, list_head};
use core_portme;


/* Function: iterate
        Run the benchmark for a specified number of iterations.

        Operation:
        For each type of benchmarked algorithm:
                a - Initialize the data block for the algorithm.
                b - Execute the algorithm N times.

        Returns:
        NULL.
*/
static list_known_crc: u16[5]  = [0xd4b0u16, 0x3340, 0x6a79, 0xe714, 0xe3c1];
static matrix_known_crc: u16[5] = [0xbe52u16, 0x1199, 0x5608, 0x1fd7, 0x0747];
static state_known_crc: u16[5]  = [0x5e47u16, 0x39bf, 0xe5a4, 0x8e3a, 0x8d84];

fn iterate(pres: *()) -> *() {
    let i: u32;
    let crc: u16;
    let res = pres as *core_results;
    let iterations = res->iterations;
    res->crc                 = 0;
    res->crclist             = 0;
    res->crcmatrix           = 0;
    res->crcstate            = 0;

    for (i = 0; i < iterations; i += 1) {
        crc      = core_bench_list(res, 1);
        res->crc = crcu16(crc, res->crc);
        crc      = core_bench_list(res, -1);
        res->crc = crcu16(crc, res->crc);
        if i == 0 {
            res->crclist = res->crc;
        }
    }
    null
}

const MULTITHREAD: u32 = 1;
const PARALLEL_METHOD: *u8 = "";
const TOTAL_DATA_SIZE: u32 = 2 * 1000;

const ID_LIST: u32 = (1 << 0);
const ID_MATRIX: u32 = (1 << 1);
const ID_STATE: u32 = (1 << 2);
const ALL_ALGORITHMS_MASK: u32 = (ID_LIST | ID_MATRIX | ID_STATE);
const NUM_ALGORITHMS: u32 = 3;


// We only support the static method
static static_memblk: u8[TOTAL_DATA_SIZE * MULTITHREAD];


// Validation
//static args: (*u8)[5] = ["0x3415", "0x3415", "0x66", "0", "0"];
// Performance
//static args: (*u8)[5] = ["0", "0", "0x66", "0", "0"];


macro get_seed_32!(i) { get_seed_args(($i), argc, argv) }
macro get_seed!(i) { get_seed_32!($i) as i16 }

/* Function: main
        Main entry routine for the benchmark.
        This function is responsible for the following steps:

        1 - Initialize input seeds from a source that cannot be determined at
   compile time. 2 - Initialize memory block for use. 3 - Run and time the
   benchmark. 4 - Report results, testing the validity of the output if the
   seeds are known.

        Arguments:
        1 - first seed  : Any value
        2 - second seed : Must be identical to first for iterations to be
   identical 3 - third seed  : Any value, should be at least an order of
   magnitude less then the input size, but bigger then 32. 4 - Iterations  :
   Special, if set to 0, iterations will be automatically determined such that
   the benchmark will run between 10 to 100 secs

*/
fn main(argc: u32, argv: **u8)  {
    let i: u32 = 0;
    let j: u32 = 0;
    let num_algorithms: u32 = 0;
    let known_id: i16 = -1;
    let total_errors: i16 = 0;
    let results: core_results[MULTITHREAD];
    let default_num_contexts: u32 = 1;

    /* first call any initializations needed */
    core_portme::portable_init(&argc, &argv, &results[0].port);

    results[0].seed1 = get_seed!(1);
    results[0].seed2 = get_seed!(2);
    results[0].seed3 = get_seed!(3);
    results[0].iterations = get_seed_32!(4) as u32;
    if debug {
        results[0].iterations = 1;
    }
    results[0].execs = get_seed_32!(5) as u32;

    if (results[0].execs == 0)
    {
        /* if not supplied, execute all algorithms */
        results[0].execs = ALL_ALGORITHMS_MASK;
    }
    /* put in some default values based on one seed only for easy testing */
    if (results[0].seed1 == 0) && (results[0].seed2 == 0)
        && (results[0].seed3 == 0)
    {
        /* perfromance run */
        results[0].seed1 = 0;
        results[0].seed2 = 0;
        results[0].seed3 = 0x66;
    }
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0)
        && (results[0].seed3 == 0))
    {
        /* validation run */
        results[0].seed1 = 0x3415;
        results[0].seed2 = 0x3415;
        results[0].seed3 = 0x66;
    }

    for (i = 0; i < MULTITHREAD; i += 1) {
        results[i].memblock[0] = (&static_memblk as *u8) + i * TOTAL_DATA_SIZE;
        results[0].size = TOTAL_DATA_SIZE;
        results[i].seed1 = results[0].seed1;
        results[i].seed2 = results[0].seed2;
        results[i].seed3 = results[0].seed3;
        results[0].err = 0;
        results[i].execs = results[0].execs;
    }

    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i += 1) {
        if ((1 << (i as u32)) & results[0].execs != 0) {
            num_algorithms += 1;
        }
    }
    for (i = 0; i < MULTITHREAD; i += 1) {
        results[i].size = results[i].size / num_algorithms;
    }
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i += 1) {
        let ctx: u32;
        if (1 << i) & results[0].execs != 0 {
            for (ctx = 0; ctx < MULTITHREAD; ctx += 1)  {
                results[ctx].memblock[i + 1]
                    = (results[ctx].memblock[0]) + results[0].size * j;
            }
            j += 1;
        }
    }

    /* call inits */
    for (i = 0; i < MULTITHREAD; i += 1) {
        if results[i].execs & ID_LIST != 0 {
            results[i].list = core_list_init(
                results[0].size, results[i].memblock[1] as *list_head,
                results[i].seed1);
        }
        if results[i].execs & ID_MATRIX != 0 {
            core_init_matrix(
                results[0].size,
                results[i].memblock[2],
                (results[i].seed1 as i32) | ((results[i].seed2 as i32) << 16),
                &(results[i].mat));
        }
        if results[i].execs & ID_STATE != 0 {
            core_init_state(
                results[0].size, results[i].seed1, results[i].memblock[3]);
        }
    }

    /* Since we're targetting systems without FP, reformulate all the
     * seconds math in ms. I don't get why coremark didn't do
     * something like this! They could generate plausible summaries
     * without FP...  */

    /* automatically determine number of iterations if not set */
    if results[0].iterations == 0 {
        let ms_passed: u32 = 0;
        results[0].iterations = 1;
        while (ms_passed < 1000)
        {
            results[0].iterations *= 10;
            core_portme::start_time();
            iterate(&results[0] as *());
            core_portme::stop_time();
            ms_passed = core_portme::get_time_ms();
        }
        /* now we know it executes for at least 1 sec, set actual run time at
         * about 10 secs */
        // XXX: we could do better here
        results[0].iterations *= 1 + 10 * 1000 / ms_passed;
    }

    // XXX: Here is where actual multithreading would go, which we don't have
    assert!(MULTITHREAD == 1);

    core_portme::start_time();
    iterate(&results[0] as *());
    core_portme::stop_time();
    let total_time = core_portme::get_time_ms();

    /* get a function of the input to report */
    let seedcrc: u16 = 0;
    seedcrc = crc16(results[0].seed1, seedcrc);
    seedcrc = crc16(results[0].seed2, seedcrc);
    seedcrc = crc16(results[0].seed3, seedcrc);
    // .... god there are so many dumb type issues in the original
    seedcrc = crc16(results[0].size as i16, seedcrc);

    /* test known output for common seeds */
    if seedcrc == 0x8a02 {
        /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
        known_id = 0;
        printf!("6k performance run parameters for coremb.\n");
    } else if seedcrc == 0x7b05 {
        /* seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
        known_id = 1;
        printf!("6k validation run parameters for coremb.\n");
    } else if seedcrc == 0x4eaf {
         /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
        known_id = 2;
        printf!("Profile generation run parameters for coremb.\n");
    } else if seedcrc == 0xe9f5 {
        /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
        known_id = 3;
        printf!("2K performance run parameters for coremb.\n");
    } else if seedcrc == 0x18f2 {
        /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
        known_id = 4;
        printf!("2K validation run parameters for coremb.\n");
    } else {
        total_errors = -1;
    }

    if known_id >= 0 {
        for (i = 0; i < default_num_contexts; i += 1) {
            results[i].err = 0;
            if (results[i].execs & ID_LIST) != 0
                && (results[i].crclist != list_known_crc[known_id as u32])
            {
                printf!("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",
                        i,
                        results[i].crclist,
                        list_known_crc[known_id as u32]);
                results[i].err += 1;
            }
            if (results[i].execs & ID_MATRIX) != 0
                && (results[i].crcmatrix != matrix_known_crc[known_id as u32])
            {
                printf!("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",
                        i,
                        results[i].crcmatrix,
                        matrix_known_crc[known_id as u32]);
                results[i].err += 1;
            }
            if (results[i].execs & ID_STATE) != 0
                && (results[i].crcstate != state_known_crc[known_id as u32])
            {
                printf!("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",
                        i,
                        results[i].crcstate,
                        state_known_crc[known_id as u32]);
                results[i].err += 1;
            }
            total_errors += results[i].err;
        }
    }
    // We skip the check_data_types bit

    printf!("CoreMb Size    : %u\n", results[0].size);
    // Maybe we should track total ticks separately but I don't all that much care
    printf!("Total time (secs): %d.%03d\n", total_time / 1000, total_time % 1000);
    let iters = default_num_contexts * results[0].iterations;
    if total_time > 0 {
        printf!("Iterations/Sec   : %d\n", 1000 * iters / total_time);
    }

    if total_time < 10*1000 {
        printf!("ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors += 1;
    }

    printf!("Iterations       : %u\n", iters);
    printf!("Compiler version : %s\n", core_portme::COMPILER_VERSION);
    printf!("Compiler flags   : %s\n", core_portme::COMPILER_FLAGS);
    if MULTITHREAD > 1 {
        printf!("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
    }

    /* output for verification */
    printf!("seedcrc          : 0x%04x\n", seedcrc);
    if results[0].execs & ID_LIST != 0 {
        for (i = 0; i < default_num_contexts; i += 1) {
            printf!("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
        }
    }
    if results[0].execs & ID_MATRIX != 0 {
        for (i = 0; i < default_num_contexts; i += 1) {
            printf!("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
        }
    }
    if results[0].execs & ID_STATE != 0{
        for (i = 0; i < default_num_contexts; i += 1) {
            printf!("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
        }
    }
    for (i = 0; i < default_num_contexts; i += 1) {
        printf!("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
    }

    if total_errors == 0 {
        printf!("Correct operation validated.\n");
        if known_id == 3 {
            printf!("CoreMb 1.0 : %d / %s %s",
                    1000 * iters/total_time,
                    core_portme::COMPILER_VERSION,
                    core_portme::COMPILER_FLAGS);
            //printf!(" / %s", mem_name[MEM_METHOD]);
            if MULTITHREAD > 1 {
                printf!(" / %d:%s", default_num_contexts, PARALLEL_METHOD);
            }
            printf!("\n");
        }
    }

    if total_errors > 0 {
        printf!("Errors detected\n");
    }
    if total_errors < 0 {
        printf!(
            "Cannot validate operation for these seed values, please compare "
                "with results on a known platform.\n");
    }

    core_portme::portable_fini(&results[0].port);
}
