mod flags;

struct core_portable {
    id: u8
}

static COMPILER_FLAGS: *u8;
static COMPILER_VERSION: *u8;

fn portable_init(pargc: *u32, pargv: ***u8, p: *core_portable) {
    // apparently it doesn't work to assign them as consts?
    COMPILER_FLAGS = flags::COMPILER_FLAGS;
    COMPILER_VERSION = flags::COMPILER_VERSION;
    p->id = 1;
}

fn portable_fini(p: *core_portable) {

}

// Clock stuff.
const MS_IN_S: u32 = 1000;
const NS_IN_MS: u32 = 1000000000 / MS_IN_S;

const CLOCK_REALTIME: u32 = 0;

// HACK! These should obviously be integer types, but we want to work
// on 64-bit linux (in ccross, at least) and don't have 64-bit integer
// types, so we use pointers instead, which we can take the difference
// of.
struct timespec {
    tv_sec: *u8, // ... ulong
    tv_nsec: *u8, // ... ilong
}

extern fn clock_gettime(clk_id: u32, tp: *timespec) -> i32;

static start_time_val: timespec;
static end_time_val: timespec;

fn start_time() {
    clock_gettime(CLOCK_REALTIME, &start_time_val);
}

fn stop_time() {
    clock_gettime(CLOCK_REALTIME, &end_time_val);
}

fn get_time_ms() -> u32 {
    (((end_time_val.tv_sec - start_time_val.tv_sec) as u32 * MS_IN_S) as i32 +
     ((end_time_val.tv_nsec - start_time_val.tv_nsec) as i32 / NS_IN_MS as i32)) as u32
}
