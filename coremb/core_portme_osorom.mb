struct core_portable {
    id: u8
}

const COMPILER_FLAGS: *u8 = "";
const COMPILER_VERSION: *u8 ="mbc";

struct timer_t {
    count: u32,
    top: u32,
    control: u32,
}

static TIMER : *timer_t = 0x80000000 as *timer_t;
const TIMER_CONTROL_TIMER_EN: u32 = 2;

fn portable_init(pargc: *u32, pargv: ***u8, p: *core_portable) {
    p->id = 1;

    TIMER->top = ~0;
    TIMER->control = (1 << TIMER_CONTROL_TIMER_EN);
}

fn portable_fini(p: *core_portable) {

}

// Clock stuff.
const TICKS_IN_S: u32 = 50000000; // XXX: should come from somewhere else
const MS_IN_S: u32 = 1000;

static end_time_val: u32;

fn start_time() {
    TIMER->count = 0;
}

fn stop_time() {
    end_time_val = TIMER->count;
}

fn get_time_ms() -> u32 {
    end_time_val / (TICKS_IN_S / MS_IN_S)
}
