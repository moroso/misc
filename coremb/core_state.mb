/* Copyright 2020 The Moroso Project */

/*
Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Original Author: Shay Gal-on
*/

/*
Topic: Description
        Simple state machines like this one are used in many embedded products.

        For more complex state machines, sometimes a state transition table
implementation is used instead, trading speed of direct coding for ease of
maintenance.

        Since the main goal of using a state machine in CoreMb is to excercise
the switch/if behaviour, we are using a small moore machine.

        In particular, this machine tests type of string input,
        trying to determine whether the input is a number or something else.
        (see core_state.png).
*/

use core_util::{crcu32, debug};

// XXX: This starts at 0 but we can't actually specify that...
enum core_state {
    CORE_START,
    CORE_INVALID,
    CORE_S1,
    CORE_S2,
    CORE_INT,
    CORE_FLOAT,
    CORE_EXPONENT,
    CORE_SCIENTIFIC,
}
const NUM_CORE_STATES: u32 = 8;

fn ee_isdigit(c: u8) -> bool {
    // XXX: the original used bitwise and
    (c >= '0') && (c <= '9')
}

/* Function: core_bench_state
        Benchmark function

        Go over the input twice, once direct, and once after introducing some
   corruption.
 */
fn core_bench_state(blksize: u32, memblock: *u8,
                    seed1: i16, seed2: i16, step: i16, crc: u16) -> u16 {
    let final_counts: u32[NUM_CORE_STATES];
    let track_counts: u32[NUM_CORE_STATES];
    let p = memblock;
    let i: u32;

    if debug {
        printf!("State Bench: %d,%d,%d,%04x\n", seed1, seed2, step, crc);
    }
    for (i = 0; i < NUM_CORE_STATES; i += 1) {
        final_counts[i] = track_counts[i] = 0;
    }
    /* run the state machine over the input */
    while *p != 0 {
        let fstate = core_state_transition(&p, &track_counts as *u32);
        final_counts[fstate as u32] += 1;
        if debug {
            printf!("%d,", fstate);
        }
    }
    if debug {
        printf!("\n");
    }
    p = memblock;
    while p < (memblock + blksize) {
        /* insert some corruption */
        if *p != ',' {
            *p ^= seed1 as u8;
        }
        p = p + step;
    }
    p = memblock;
    /* run the state machine over the input again */
    while *p != 0 {
        let fstate = core_state_transition(&p, &track_counts as *u32);
        final_counts[fstate as u32] += 1;
        if debug {
            printf!("%d,", fstate);
        }
    }
    if debug {
        printf!("\n");
    }

    p = memblock;
    while p < (memblock + blksize) {
        /* undo corruption is seed1 and seed2 are equal */
        if *p != ',' {
            *p ^= seed2 as u8;
        }
        p = p + step;
    }
    /* end timing */
    for (i = 0; i < NUM_CORE_STATES; i += 1) {
        crc = crcu32(final_counts[i], crc);
        crc = crcu32(track_counts[i], crc);
    }
    crc
}

/* Default initialization patterns */
static intpat: (*u8)[4] = ["5012", "1234", "-874", "+122"];
static floatpat: (*u8)[4] = ["35.54400", ".1234500", "-110.700", "+0.64400"];
static scipat: (*u8)[4] = ["5.500e+3", "-.123e-2", "-87e+832", "+0.6e-12"];
static errpat: (*u8)[4] = ["T0.3e-1F", "-T.T++Tq", "1T3.4e4z", "34.0e-T^"];


const ASDF: u32 = 0;

/* Function: core_init_state
        Initialize the input data for the state machine.

        Populate the input with several predetermined strings, interspersed.
        Actual patterns chosen depend on the seed parameter.

        Note:
        The seed parameter MUST be supplied from a source that cannot be
   determined at compile time
*/
fn core_init_state(size: u32, seed: i16, p: *u8) {

    let total: u32 = 0;
    let next: u32 = 0;
    let buf: *u8 = 0 as *u8;
    let start: *u8 = p;

    if debug {
        printf!("State: %d,%d\n", size, seed);
    }
    size -= 1;
    next = 0;
    while (total + next + 1) < size {
        if next > 0 {
            let i: u32;
            for (i = 0; i < next; i += 1) {
                *(p + total + i) = buf[i];
            }
            *(p + total + i) = ',';
            total += next + 1;
        }
        seed += 1;
        let mseed: u8 = (seed & 0x7) as u8;
        /* int */
        if mseed == 0 || mseed == 1 || mseed == 2 {
            buf = intpat[((seed >> 3) & 0x3) as u32];
            next = 4;
        }
        /* float */
        else if mseed == 3 || mseed == 4 {
            buf  = floatpat[((seed >> 3) & 0x3) as u32];
            next = 8;
        }
        /* scientific */
        else if mseed == 5 || mseed == 6 {
            buf  = scipat[((seed >> 3) & 0x3) as u32];
            next = 8;
        }
        /* invalid */
        else if mseed == 7 {
            buf  = errpat[((seed >> 3) & 0x3) as u32];
            next = 8;
        }
    }
    size += 1;
    while total < size {
        /* fill the rest with 0 */
        *(p + total) = 0;
        total += 1;
    }
    if debug {
        printf!("State Input: %s\n", start);
    }
}

/* Function: core_state_transition
        Actual state machine.

        The state machine will continue scanning until either:
        1 - an invalid input is detcted.
        2 - a valid number has been detected.

        The input pointer is updated to point to the end of the token, and the
   end state is returned (either specific format determined or invalid).
*/
fn core_state_transition(instr: **u8, transition_count: *u32) -> core_state {
    let str: *u8 = *instr;
    let NEXT_SYMBOL: u8;
    let state: core_state = CORE_START;

    for (; *str != 0 && state != CORE_INVALID; str = &str[1]) {
        NEXT_SYMBOL = *str;
        if NEXT_SYMBOL == ',' {
            /* end of this input */
            str = &str[1];
            break;
        }

        match state {
            CORE_START => {
                if ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_INT;
                } else if NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' {
                    state = CORE_S1;
                } else if NEXT_SYMBOL == '.' {
                    state = CORE_FLOAT;
                } else {
                    state = CORE_INVALID;
                    transition_count[CORE_INVALID as u32] += 1;
                }
                transition_count[CORE_START as u32] += 1;
            },
            CORE_S1 => {
                if ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_INT;
                    transition_count[CORE_S1 as u32] += 1;
                } else if NEXT_SYMBOL == '.' {
                    state = CORE_FLOAT;
                    transition_count[CORE_S1 as u32] += 1;
                } else {
                    state = CORE_INVALID;
                    transition_count[CORE_S1 as u32] += 1;
                }
            },
            CORE_INT => {
                if NEXT_SYMBOL == '.' {
                    state = CORE_FLOAT;
                    transition_count[CORE_INT as u32] += 1;
                } else if !ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_INVALID;
                    transition_count[CORE_INT as u32] += 1;
                }
            },
            CORE_FLOAT => {
                if NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' {
                    state = CORE_S2;
                    transition_count[CORE_FLOAT as u32] += 1;
                } else if !ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_INVALID;
                    transition_count[CORE_FLOAT as u32] += 1;
                }
            },
            CORE_S2 => {
                if NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' {
                    state = CORE_EXPONENT;
                    transition_count[CORE_S2 as u32] += 1;
                } else {
                    state = CORE_INVALID;
                    transition_count[CORE_S2 as u32] += 1;
                }
            },
            CORE_EXPONENT => {
                if ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_SCIENTIFIC;
                    transition_count[CORE_EXPONENT as u32] += 1;
                } else {
                    state = CORE_INVALID;
                    transition_count[CORE_EXPONENT as u32] += 1;
                }
            },
            CORE_SCIENTIFIC => {
                if !ee_isdigit(NEXT_SYMBOL) {
                    state = CORE_INVALID;
                    transition_count[CORE_INVALID as u32] += 1;
                }
            },
            CORE_INVALID => {}
        }
    }

    *instr = str;
    state
}
