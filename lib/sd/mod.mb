struct sd_t {
    speed: u32,
    control: u32,
    status: u32,
    cmd: u32,
    arg: u32,
    __resv0: u32[3],
    resp: u32[4],
}

const SD: *sd_t = 0x80003000 as *sd_t;
const SD_DAT: *u32 = 0x80003800 as *u32;

// Note: eventually we should have something to initialize the SD card.
// But as long as we're using the SD bootloader, that'll already be done.

fn wait() {
    while (SD->status & 0x7) != 0 {}
}

fn start_block_read(block: u32) {
    SD->arg = block;
    SD->cmd = 0x12811;
}

fn copy_block(dest: *u32) {
    let i: u32;
    for (i = 0; i < 128; i += 1) {
        dest[i] = SD_DAT[i];
    }
}

fn copy(start_block: u32, end_block: u32, dest: *u32) {
    let block: u32;
    let offs: u32 = 0;

    for (block = start_block; block < end_block; block += 1) {
        start_block_read(block);
        wait();
        copy_block(dest + offs);
        offs += 128; // 1 block = 128 words
    }
}
