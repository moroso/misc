use lib::sd;
use lib::video;
use lib::audio;
use lib::uart;
use lib::ledsw;

mod lib;

static next_buffer_segment: audio::buf_enum = audio::FIRST_HALF;
static audio_buffer: u32[16777216];
static gameover_buffer: u32 = 0x8000000 + 640 * 480 * 3;
static audio_offs: u32 = 0;
const SD_DATA_BASE: u32 = 64;

static video_buffer: u32 = 0x8000000;


static randstate: u32;
fn rand() -> u32 {
    let x = randstate + 1;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    randstate = x;

    randstate
}

const NUM_RANDOMS: u32 = 640 + 0xfff;
static randoms: u8[NUM_RANDOMS];

extern "bare" fn draw_row_asm(randoms: *u8, offs: u32, width: u32, video_buffer: u32) {
    asm!(
            // r0 = random, r1 = offs, r2 = width, r3 = video buffer
            // Four pixels are packed into every three words.
            // r3 = current word position.
            // r4 = current pixel position.
            // r5 = current position relative to the road; <u r2 means we're on the road.
            "{ r4 <- 0; r5 <- r1 -: 0; }"
            // r6, and r7 will store pixel data before it's written to ram.

          "pixel_loop:"
            "{ p1 <- r5 < r2; r5 <- r5 + 1; }"
            // p1 now tells us if we're on the road. (true=road; false=grass).
            // First pixel. Note that we're little-endian, so bytes here are backwards.
            "{ p1? r6 <- long; long 0x505050; !p1? r6 <- 0x008000; p1 <- r5 <u r2; }"
            // Second pixel. Occupies one byte of the first word and two bytes of the second.
            // Note that in the !p1 case, the value we'd be ORing to r6 is 0,
            // so luckily we can just leave it off.
            "{ p1? r6 <- r6 | 0x50000000; !p1? r7 <- 0x0080; p1? r7 <- 0x5050; r5 <- r5 + 1; }"
            "{ r8 <- r0 + r4; }"
            "{ r8 <- *l(r8); }"
            "{ r6 <- r6 + r8; }"
            "{ *l(r3) <- r6; p1 <- r5 <u r2; }"
            // Third pixel! Occupies two bytes of the second word and one byte of the third.
            "{ p1? r7 <- r7 | long; long 0x50500000; !p1? r7 <- r7 | 0x80000000; r5 <- r5 + 1; }"
            "{ r7 <- r7 + r8; }"
            "{ *l(r3 + 4) <- r7; p1? r6 <- 0x50; !p1? r6 <- 0; p1 <- r5 <u r2; }"
            // Last pixel! Last three bytes of the last word.
            "{ p1? r6 <- r6 | long; long 0x50505000; !p1? r6 <- r6 | 0x00800000; }"
            "{ r6 <- r6 + r8; }"
            "{ *l(r3 + 8) <- r6; r3 <- r3 + 12; r4 <- r4 + 4; r5 <- r5 + 1; }"
            "{ p0 <- r4 < 640; }"
            //"{ b r31 + 1; }"
            "{ p0? b pixel_loop; }"

            "{ b r31 + 1; }"
    );
}

fn draw_row(offs: u32, width: u32) {
    poll_audio();
    let rand_offs = rand() & 0xfff;
    draw_row_asm(&randoms[rand_offs], offs, width, video_buffer);
    poll_audio();
}

// Unused, slow row drawer.
fn slow_draw_row(y: u32, offs: u32, width: u32) {
    let x: u32;

    for (x = 0; x < 640; x += 1) {
        if x & 0x1f == 0 {
            //poll_audio();
        }

        let r: u8 = (rand() & 0xf) as u8;
        if (x >= offs && x < offs + width) {
            video::putpixel(video_buffer as *u8, x, y,
                            0x50 + r, 0x50 + r, 0x50 + r);
        } else {
            video::putpixel(video_buffer as *u8, x, y, 0, 0x80 + r, 0);
        }
    }
}

fn poll_audio() {
    if !audio::buffer_ready(next_buffer_segment) {
        return ();
    }
    audio::clear_buffer_flags();
    let i: u32 = 0;

    for (i = 0; i < 8; i += 1) {
        audio::BUFFER[audio_offs & 0xf] = audio_buffer[audio_offs];
        audio_offs += 1;
    }

    next_buffer_segment = match next_buffer_segment {
        audio::FIRST_HALF => audio::SECOND_HALF,
        audio::SECOND_HALF => audio::FIRST_HALF,
    };
}

static road_pos: u32[480];
static road_width: u32[480];
static road_idx: u32;


static sd_index: u32[128];
fn load_index() {
    sd::copy(SD_DATA_BASE, SD_DATA_BASE + 1, &sd_index[0]);
}

fn load_item(idx: u32, dest: *u32) {
    sd::copy(SD_DATA_BASE + sd_index[idx << 1], SD_DATA_BASE + sd_index[(idx << 1) + 2], dest);
}

fn load_audio() {
    const loading_bar_left: u32 = (640 - 512) / 2;
    const loading_bar_y: u32 = 400;
    const loading_bar_height: u32 = 8;
    let i: u32;
    let j: u32;
    for (i = 1; i < 511; i += 1) {
        for (j = 0; j < loading_bar_height; j += 1) {
            video::putpixel(video_buffer as *u8, loading_bar_left + i, loading_bar_y + j, 0, 0, 0);
        }
    }

    const audio_idx: u32 = 2;
    let start_block: u32 = SD_DATA_BASE + sd_index[audio_idx << 1];
    let end_block: u32 = SD_DATA_BASE + sd_index[(audio_idx << 1) + 2];
    // Use this instead to skip loading most of the audio.
    let end_block: u32 = start_block + 1000;
    let status_inc = (end_block - start_block) >> 9; // Increment status bar every status_inc blocks.

    uart::write("Loading sound...\r\n");

    let dest: *u32 = &audio_buffer[0] as *u32;

    let last_block: u32 = start_block;
    let status_count: u32 = 0;
    for (i = start_block; i < end_block; i += 1) {
        sd::copy(i, i + 1, dest);
        dest += 128;
        if i > last_block + status_inc {

            last_block = i;
            status_count += 1;
            for (j = 0; j < loading_bar_height; j += 1) {
                video::putpixel(video_buffer as *u8, loading_bar_left + status_count, loading_bar_y + j, 0xff, 0xff, 0xff);
            }
        }
    }

    uart::write("Done.\r\n");
}

fn wait_retrace() {
    video::clear_retrace();
    while !video::poll_retrace() { poll_audio(); }
}

fn init_random() {
    let i: u32;
    for (i = 0; i < NUM_RANDOMS; i += 1) {
        randoms[i] = (rand() & 0xf) as u8;
    }
}

fn init(initial_width: u32) {
    audio::init();
    video::init();

    init_random();

    load_index();
    video::VIDEO->base = video_buffer;

    load_item(0, video::VIDEO->base as *u32);
    load_item(1, gameover_buffer as *u32);

    load_audio();

    road_idx = 0;

    let half_width = initial_width >> 1;

    let i: u32;
    for (i = 0; i < 480; i += 1) {
        road_pos[i] = 320 - half_width;
        road_width[i] = initial_width;
    }

    for (i = 0; i < 480; i += 1) {
        draw_row(320 - half_width, initial_width);
        video_buffer -= 640 * 3;
    }

    for (i = 0; i < 480; i += 4) {
        video::VIDEO->base -= 640 * 3 * 4;
        wait_retrace();
    }
}

fn gameover(score: u32) {
    let iter: u32 = 0;

    // Shake the screen
    while true {
        poll_audio();

        if iter & 0x4 == 0 {
            video::VIDEO->base += 640 * 3 * 4;
        } else {
            video::VIDEO->base -= 640 * 3 * 4;
        }
        wait_retrace();

        if iter >= 64 { break; }
        iter += 1;
    }

    video::VIDEO->base = gameover_buffer as u32;

    while true {
        poll_audio();
    }
}

fn main() {
    const size: u32 = 50;
    let width: u32 = 150;
    const margin: u32 = 10;

    init(width);

    video::VIDEO->base = video_buffer;
    video::wait_retrace();
    let y: u32;
    let x: u32 = 320 - (width >> 1);

    let c = 0;
    let increasing: bool = false;
    let last_increasing: bool = false;

    let player_x: u32 = 320;

    let counter = 0;
    let counter2 = 0;
    let speed_counter = 0;
    let speed = 2;

    let speed_breaks: u32[6] = [480, 480 * 2, 480 * 6, 480 * 16, 480 * 32, 0xffffffff];

    while true {
        counter += 1;
        speed_counter += 1;

        if ledsw::LEDSW->sw_buttons & 0x8 != 0 {
            player_x -= 1;
        } else if ledsw::LEDSW->sw_buttons & 0x4 != 0 {
            player_x += 1;
        }

        video::putpixel(video_buffer as *u8, player_x, 470, 0xff, 0xff, 0xff);

        poll_audio();
        let i: u32;
        draw_row(x, width);
        video::VIDEO->base = video_buffer;
        if speed_counter >= speed {
            while !video::poll_retrace() {
                poll_audio();
            }
            video::clear_retrace();

            speed_counter = 0;
            if counter > speed_breaks[speed - 2] {
                speed += 1;
            }
        }
        video_buffer -= 640 * 3;

        c += 1;
        if c == size {
            last_increasing = increasing;
            if x <= size + margin {
                increasing = true;
            } else if 640 - margin - width - x <= size {
                increasing = false;
            } else {
                increasing = rand() & 1 == 0;
            }
            c = 0;

            counter2 += 1;
            if speed >= 6 && counter2 & 0x7 == 0 {
                x += 1;
                width -= 2;
            }
        }

        if c > 10 || increasing == last_increasing {
            if increasing {
                x += 1;
            } else {
                x -= 1;
            }
        }

        let p_idx = road_idx + 10;
        if p_idx >= 480 { p_idx -= 480; }
        let rx = road_pos[p_idx];
        let rw = road_width[p_idx];
        if player_x < rx || player_x > rx + rw {
            gameover(counter);
        }

        road_pos[road_idx] = x;
        road_width[road_idx] = width;
        road_idx += 1;
        if road_idx == 480 { road_idx = 0; }

    }

    while true {
        poll_audio();
    }
}
